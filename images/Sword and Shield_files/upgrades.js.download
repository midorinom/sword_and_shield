"use strict";

function showUpgradesDescription1() {
  upgradesDescription1.style.display = "flex";
  upgradesImage1.style.display = "none";
}
function hideUpgradesDescription1() {
  upgradesImage1.style.display = "block";
  upgradesDescription1.style.display = "none";
}
function showUpgradesDescription2() {
  upgradesDescription2.style.display = "flex";
  upgradesImage2.style.display = "none";
}
function hideUpgradesDescription2() {
  upgradesImage2.style.display = "block";
  upgradesDescription2.style.display = "none";
}

function selectUpgrade1Image() {
  upgradesImage2.style.height = 30 + "%";
  upgradesImage2.style.width = 15 + "%";
  upgrades2Selected = false;
  hideUpgradesDescription2();

  if (upgrades1Selected === false) {
    showUpgradesDescription1();
    upgradesImage1.style.height = 50 + "%";
    upgradesImage1.style.width = 20 + "%";
    upgrades1Selected = true;
    chosenUpgrade = randomUpgrade1;
  } else {
    hideUpgradesDescription1();
    upgradesImage1.style.height = 50 + "%";
    upgradesImage1.style.width = 20 + "%";
    upgrades1Selected = false;
    chosenUpgrade = "notSelected";
  }
}

function selectUpgrade2Image() {
  upgradesImage1.style.height = 50 + "%";
  upgradesImage1.style.width = 20 + "%";
  upgrades1Selected = false;
  hideUpgradesDescription1();

  if (upgrades2Selected === false) {
    showUpgradesDescription2();
    upgradesImage2.style.height = 70 + "%";
    upgradesImage2.style.width = 30 + "%";
    upgrades2Selected = true;
    chosenUpgrade = randomUpgrade2;
  } else {
    hideUpgradesDescription2();
    upgradesImage2.style.height = 50 + "%";
    upgradesImage2.style.width = 20 + "%";
    upgrades2Selected = false;
    chosenUpgrade = "notSelected";
  }
}

function determineTwoRandomUpgrades() {
  const randomNumber1 = Math.floor(Math.random() * 100);
  const randomNumber2 = Math.floor(Math.random() * 100);

  if (currentStage < 3) {
    if (randomNumber1 < 16 || randomNumber2 < 16) {
      randomUpgrade1 = Object.keys(upgrades.stages12Upgrades)[0];
      randomUpgrade2 = Object.keys(upgrades.stages12Upgrades)[
        Math.ceil(Math.random() * 3)
      ];
    } else {
      const randomNumber3 = Math.floor(Math.random() * 3);
      switch (randomNumber3) {
        case 0:
          randomUpgrade1 = Object.keys(upgrades.stages12Upgrades)[1];
          randomUpgrade2 = Object.keys(upgrades.stages12Upgrades)[2];
          break;
        case 1:
          randomUpgrade1 = Object.keys(upgrades.stages12Upgrades)[1];
          randomUpgrade2 = Object.keys(upgrades.stages12Upgrades)[3];
          break;
        case 2:
          randomUpgrade1 = Object.keys(upgrades.stages12Upgrades)[2];
          randomUpgrade2 = Object.keys(upgrades.stages12Upgrades)[3];
      }
    }
  } else {
    // First upgrade is taken from the stages12 pool
    if (randomNumber1 < 16) {
      randomUpgrade1 = Object.keys(upgrades.stages12Upgrades)[0];
    } else {
      randomUpgrade1 = Object.keys(upgrades.stages12Upgrades)[
        Math.ceil(Math.random() * 3)
      ];
    }
    // Second upgrade is taken from the stages34 pool
    if (currentStage === 3) {
      randomUpgrade2 = Object.keys(upgrades.stages34Upgrades)[
        Math.floor(Math.random() * 4)
      ];
    } else if (currentStage === 4) {
      const poolOfUpgrades = [...Object.keys(upgrades.stages34Upgrades)];
      for (let i = 0; i < 4; i++) {
        if (poolOfUpgrades[i] === arrUpgrades[2]) {
          poolOfUpgrades.splice(i, 1);
        }
      }
      randomUpgrade2 = poolOfUpgrades[Math.floor(Math.random() * 3)];
    }
    upgradesDescription2.style.color = "yellow";
  }
  // Update the images
  upgradesImage1.src = randomUpgrade1;
  upgradesImage2.src = randomUpgrade2;

  // Update the description
  upgradesDescription1.innerText =
    upgrades.getUpgradeDescription(randomUpgrade1);
  upgradesDescription1.style.background = `url(${randomUpgrade1})`;
  upgradesDescription1.style.backgroundSize = "cover";

  upgradesDescription2.innerText =
    upgrades.getUpgradeDescription(randomUpgrade2);
  upgradesDescription2.style.background = `url(${randomUpgrade2})`;
  upgradesDescription2.style.backgroundSize = "cover";
}

function upgradesSubmitButton() {
  if (chosenUpgrade === "notSelected") {
    alert("Please select an upgrade");
  } else {
    // Activate the upgrade
    upgrades.activateUpgrade(chosenUpgrade, player);

    // Add the chosenUpgrade into the arrUpgrades
    arrUpgrades.push(chosenUpgrade);

    // Update the inventory images
    switch (currentStage) {
      case 1:
        document.querySelector("#upgrades_inventory_image1").src =
          chosenUpgrade;
        document.querySelector("#upgrades_inventory_image1").style.display =
          "block";
        break;
      case 2:
        document.querySelector("#upgrades_inventory_image2").src =
          chosenUpgrade;
        document.querySelector("#upgrades_inventory_image2").style.display =
          "block";
        break;
      case 3:
        document.querySelector("#upgrades_inventory_image3").src =
          chosenUpgrade;
        document.querySelector("#upgrades_inventory_image3").style.display =
          "block";
        break;
      case 4:
        document.querySelector("#upgrades_inventory_image4").src =
          chosenUpgrade;
        document.querySelector("#upgrades_inventory_image4").style.display =
          "block";
    }

    // Reset the state
    hideUpgradesDescription1();
    upgrades1Selected = false;
    upgradesImage1Container.style.height = 50 + "%";
    upgradesImage1Container.style.width = 20 + "%";
    hideUpgradesDescription2();
    upgrades2Selected = false;
    upgradesImage2Container.style.height = 50 + "%";
    upgradesImage2Container.style.width = 20 + "%";

    chosenUpgrade = "notSelected";

    currentStage += 1;

    generateEnemy();

    upgradesImage1Container.removeEventListener("click", selectUpgrade1Image);
    upgradesImage2Container.removeEventListener("click", selectUpgrade2Image);
    upgradesContainer.style.display = "none";

    startStage(player, currentEnemy);

    autoPlayerActionGauge = setInterval(() => {
      playerContinuousEvents(currentEnemy);
    }, player.agility);
    autoEnemyActionGauge = setInterval(() => {
      enemyContinuousEvents(currentEnemy);
    }, currentEnemy.agility);
  }
}
